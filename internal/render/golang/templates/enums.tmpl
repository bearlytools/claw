{{- range $enumsIndex, $enumGroup := .File.Enums }}
type {{  $enumGroup.Name }} {{  $enumGroup.GoType }}

// String implements fmt.Stringer.
func (x {{  $enumGroup.Name }}) String() string {
    return {{  $enumGroup.Name }}ByValue[{{ $enumGroup.GoType }}(x)]
}

// XXXEnumGroup will return the EnumGroup descriptor for this group of enumerators.
// This should only be used by the reflect package and is has no compatibility promises 
// like all XXX fields.
func (x {{ $enumGroup.Name }}) XXXEnumGroup() reflect.EnumGroup {
    return XXXEnumGroups.Get({{ $enumsIndex }})
}

// XXXEnumGroup will return the EnumValueDescr descriptor for an enumerated value.
// This should only be used by the reflect package and is has no compatibility promises 
// like all XXX fields.
func (x {{ $enumGroup.Name }}) XXXEnumValueDescr() reflect.EnumValueDescr {
    return XXXEnumGroups.Get({{ $enumsIndex }}).ByValue(uint16(x))
}

{{ $enum := . }}
const (
{{- range $index, $value := .OrderByValues }}
    {{ $value.Name }} {{ $enum.Name }} = {{ $value.Value }}
{{- end }}
)

var {{ .Name }}ByName = map[string]{{ .Name }}{
{{- range $index, $value := $enum.OrderByNames }}
    "{{ $value.Name }}": {{ $value.Value }},
{{- end }}
}

var {{ .Name }}ByValue = map[{{ $enum.GoType }} ]string{
{{- range $index, $value := $enum.OrderByValues}}
    {{ $value.Value }}: "{{ $value.Name }}",
{{- end }}
}
{{- end }} {{/* End range .Enums */}}