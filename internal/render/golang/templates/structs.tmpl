{{- range .Structs }}
type {{ .Name }} struct {
   s *structs.Struct
}

// New{{ .Name }} creates a new instance of {{ .Name }}.
func New{{ .Name }}() {{ .Name }} {
    return {{ .Name }}{
        s: structs.New(0, mapping{{.Name}}),
    }
}
{{- $struct := . }}
{{- range $index, $field := .Fields }}
{{- if eq $field.TypeAsString "Bool" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() bool {
    return structs.MustGetBool(x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value bool) {
    return structs.MustSetBool(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Int8" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() int8 {
    return structs.MustGetNumber[int8](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value int8) {
    return structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Int16" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() int16 {
    return structs.MustGetNumber[int16](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value int16) {
    return structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Int32" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() int32 {
    return structs.MustGetNumber[int32](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value int32) {
    return structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Int64" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() int64 {
    return structs.MustGetNumber[int64](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value int64) {
    return structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Uint8" }}
{{- if $field.IdentName }} {{/* It is a Enum */}}

func (x {{ $struct.Name }}) {{ $field.Name }}() {{ $field.IdentName }} {
    return {{ $field.IdentName }}(structs.MustGetNumber[uint8](x.s, {{ $field.Index }}))
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value {{ $field.IdentName }}) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, uint8(value))
}
{{- else }}

func (x {{ $struct.Name }}) {{ $field.Name }}() uint8 {
    return structs.MustGetNumber[uint8](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value uint8) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}
{{- end }}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Uint16" }}
{{ if $field.IdentName }} {{/* It is a Enum */}}

func (x {{ .Name }}) {{ $field.Name }}() {{ $field.IdentName }} {
    return {{ $field.IdentName }}(structs.MustGetNumber[uint8](x.s, {{ $field.Index }}))
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value {{ $field.IdentName }}) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, uint16(value))
}
{{- else }}

func (x {{ $struct.Name }}) {{ $field.Name }}() uint16 {
    return structs.MustGetNumber[uint16](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value uint16) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}
{{- end }}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Uint32" }}
func (x {{ $struct.Name }}) {{ $field.Name }}() uint32 {
    return structs.MustGetNumber[uint32](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value uint32) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Uint64" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() uint64 {
    return structs.MustGetNumber[uint64](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value uint64) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Float32" }}
func (x {{ $struct.Name }}) {{ $field.Name }}() float32 {
    return structs.MustGetNumber[float32](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value float32) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Float64" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() float64 {
    return structs.MustGetNumber[float64](x.s, {{ $field.Index }})
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value float64) {
    structs.MustSetNumber(x.s, {{ $field.Index }}, value)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "String" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() string {
    ptr := structs.MustGetBytes(x.s, {{ $field.Index }})
    return conversions.ByteSlice2String(*ptr)
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value string) {
    b := conversions.UnsafeGetBytes(value)
    structs.MustSetBytes(x.s, {{ $field.Index }}, b, true)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Bytes" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() []byte {
    ptr := structs.MustGetBytes(x.s, {{ $field.Index }})
    return *ptr
}

func (x {{ $struct.Name }}) SafeGet{{ $field.Name }}() []byte {
    ptr := structs.MustGetBytes(x.s, {{ $field.Index }})
    b := make([]byte, len(*ptr))
    copy(b, *ptr)
    return b
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value []byte) {
    structs.MustSetBytes(x.s, {{ $field.Index }}, value, false)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "Struct" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() {{ $field.IdentName }} {
    s := structs.MustGetStruct(x.s, {{ $field.Index }})
    return {{ $field.IdentName }}{s: s} 
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value {{ $field.IdentName }}) {
    MustSetStruct(x.s, {{ $field.Index }}, value.s)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "ListBools" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() list.Bools {
    return list.XXXFromBools(MustGetListBool(x.s, {{ $field.Index }}))
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value list.Bools) {
    MustSetListBool(x.s, {{ $field.Index }}, value.XXXBools())
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "ListUint8" "ListUint16" "ListUint32" "ListUint64" "ListInt8" "ListInt16" "ListInt32" "ListInt64" "ListFloat32" "ListFloat64"}}

func (x {{ $struct.Name }}) {{ $field.Name }}() lists.Numbers[.GoListType] {
    n := MustGetListNumber[.GoListType](x.s, {{ $field.Index }})
    return list.XXXFromNumbers(n) 
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value lists.Numbers[.GoListType]) {
    n := value.XXXNumbers()
    MustSetListNumber(x.s, {{ $field.Index }}, n)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "ListBytes" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() *lists.Bytes {
    b := MustGetListBytes(x.s, {{ $field.Index }})
    return list.XXXFromBytes(b) 
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value *lists.Bytes) {
    b := value.XXXBytes()
    MustSetListBytes(x.s, {{ $field.Index }}, b)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "ListStrings" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() *lists.String {
    b := MustGetListBytes(x.s, {{ $field.Index }})
    return &lists.XXXFromStrings(b)
}

func (x {{ $struct.Name }}) Set{{ $field.Name }}(value *lists.String) {
    MustSetListBytes(x.s, {{ $field.Index }}, value.XXXBytes())
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- else if eq $field.TypeAsString "ListStructs" }}

func (x {{ $struct.Name }}) {{ $field.Name }}() []{{ $field.IdentName }} {
    ptr := structs.MustGetListStruct(x.s, {{ $field.Index }})
    vals := make([]{{ $field.IdentName }}, len(*ptr))
    for i, val := range vals {
        val.s = (*ptr)[i]
        vals[i] = val
    }
    return vals
}

func (x {{ $struct.Name }}) Append{{ $field.Name }}(values ...{{ $field.IdentName }}) {
    vals := make([]*structs.Struct, len(values))
    for i, val := range values {
        vals[i] = val.s
    }
    structs.MustAppendListStruct(x.s, {{ $field.Index }}, vals...)
}

func (x {{ $struct.Name }}) IsSet{{ $field.Name }}() bool{
    return x.s.IsSet({{ $field.Index }})
}
{{- end }} {{/* End if eq $field.Type */}}
{{- end }} {{/* End range $index, $field := .Fields */}}
{{- end }} {{/* End range .Structs */}}