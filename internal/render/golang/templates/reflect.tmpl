{{/*
dot(.)/pipeline starts as:

type templateData struct {
	Path   string
	Config *imports.Config
	File   *idl.File
}

*/}}
{{- $templateData := . }}
{{- $file := .File }}

{{- if $file.Enums }}

{{/* 
Statically setup each EnumGroup so they can be added diredtly to XXXEnumGroups
without having to use an init().
*/}}

{{- range $file.Enums }}
var XXXEnumGroup{{ .Name }} = reflect.XXXEnumGroupImpl{
    GroupName: "{{ .Name }}",
    GroupLen: {{ .Len }},
    EnumSize: {{ .Size }},
    Descrs: []reflect.EnumValueDescr{
        {{- $size := .Size }}
        {{- range .OrderByValues }}
        reflect.XXXEnumValueDescrImpl{
            EnumName: "{{ .Name }}",
            EnumNumber: {{ .Value }},
            EnumSize: {{ $size}},
        },
        {{- end }}
    },
}
{{- end }}

// Deprecated: Not deprecated, but shouldn't be used directly or show up in documentation.
var XXXEnumGroups reflect.EnumGroups = reflect.XXXEnumGroupsImpl{
    List:   []reflect.EnumGroup{
        {{- range $file.Enums }}
        XXXEnumGroup{{ .Name }},
        {{- end }}
    },
    Lookup: map[string]reflect.EnumGroup{
        {{- range $file.Enums }}
        "{{ .Name }}": XXXEnumGroup{{ .Name }},
        {{- end }}
    },
}
{{- end }} {{/* end Enum if */}} 

{{- range $index, $struct := $file.Structs }}
var XXXStructDescr{{ .Name }} = &reflect.XXXStructDescrImpl{
    Name:      "{{  $struct.Name }}",
    Pkg:       XXXMapping{{  $struct.Name }}.Pkg,
    Path:      XXXMapping{{  $struct.Name }}.Path,
    Mapping:   XXXMapping{{ $struct.Name }},
    FieldList: []reflect.FieldDescr {
        {{- range $i, $field :=  $struct.Fields }}
        {{ if $field.IsExternal }}
        reflect.XXXFieldDescrImpl{
            FD: XXXMapping{{ $struct.Name }}.Fields[{{ $i}}],
            {{- if $field.IsEnum }}
            EG: {{ $field.Package }}.XXXEnumGroup{{ $field.IdentInFile }},
            {{- else }}
            {{- if $field.IdentName }}
            SD: {{ $field.Package }}.XXXStructDescr{{ $field.IdentInFile}},
            {{- end }}
            {{- end }}
        },
        {{ else }}
        reflect.XXXFieldDescrImpl{
            FD:  XXXMapping{{ $struct.Name }}.Fields[{{ $i }}],
            {{- if $field.IsEnum }}
            EG: XXXEnumGroup{{ $field.IdentName }},
            {{- else }}
            {{- with $field.IdentName }}
            SD: XXXStructDescr{{ . }},
            {{- end }} {{/* with $field.IdentName */}}
            {{- end }} {{/* if $field.IsEnum */}}
        },
        {{- end}} {{/* if .IsExternal */}}
        {{- end }} {{/* range $i, $field :=  $struct.Fields */}}
    },
}
{{- end }}

var XXXStructDescrs = map[string]*reflect.XXXStructDescrImpl{
    {{- range $file.Structs }}
    "{{ .Name }}":  XXXStructDescr{{ .Name }},
    {{- end }}
}

// Deprecated: No deprecated, but shouldn't be used directly or show up in documentation.
var XXXPackageDescr reflect.PackageDescr = &reflect.XXXPackageDescrImpl{
    Name: "{{ $file.Package }}",
    Path: "{{ $file.FullPath }}",
    {{- if $file.Imports.Imports }}
    ImportDescrs: []reflect.PackageDescr {
    {{- range $index, $value := $file.Imports.Imports }}
        {{ $value.Name }}.XXXPackageDescr,
    {{- end }} {{/* end .Imports range */}} 
    },
    {{- end }} {{/* end Imports if */}} 
    {{- if $file.Enums }}
    EnumGroupsDescrs: XXXEnumGroups,
    {{- end }} {{/* end Enum if */}}
    {{- $structs := $file.Structs}}
    {{- if $structs }}
    StructsDescrs: reflect.XXXStructDescrsImpl{
        Descrs: []reflect.StructDescr{
            {{- range $structs }}
            XXXStructDescr{{ .Name }},
            {{- end }}
        },
    },
    {{- end }} {{/* if $file.Identifers */}} 
}

// PackageDescr returns a PackageDescr for this package.
func PackageDescr() reflect.PackageDescr {
    return XXXPackageDescr
}

// Registers our package description with the runtime.
func init() {
    runtime.RegisterPackage(XXXPackageDescr)
}